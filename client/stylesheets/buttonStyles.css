.action, .smallAction, .roundAction, .openAction {
  font-size: var(--tx0);
  letter-spacing: 1px;
  padding: 0.5ch 1ch;
  min-height: 32px;
  line-height: 1;
}
.action, .roundAction, .openAction {
	text-transform: uppercase;
	font-weight: 600;
	overflow: hidden;
	background-color: var(--actionColor, var(--silver));
  box-shadow: var(--navIndicatorOut);
  color: var(--actionText, white);
  outline: 3px solid;
  outline-offset: -3px;
  outline-color: transparent;
}
.action:where(:hover,:focus-visible),
.roundAction:where(:hover,:focus-visible) {
  outline-offset: 3px;
  outline-color: var(--actionColor, var(--silver));
}
.action:active,
.roundAction:active {
  outline-offset: 4px;
  outline-color: var(--actionColor, var(--silver));
}
.action:disabled:where(:hover,:active),
.roundAction:disabled:where(:hover,:active) {
  outline: inherit;
  outline-offset: inherit;
  outline-color: inherit;
}
.smallAction {
  min-width: var(--txx0);
}

.inlineModel {
  width: 100%;
}
.inlineModel.open > div {
  width: 100%;
  border-width: 3px;
  border-style: solid;
  border-top-width: 0;
  transition: all 500ms ease-in-out;
}

.nHover,
.greenHover,
.blueHover,
.redHover,
.orangeHover,
.blackHover,
.wetHover {
  color: var(--actionColor);
  background-color: white;
  border-width: 1.5px;
  border-style: solid;
  border-color: var(--actionColor);
}
.nHover:hover,
.greenHover:hover,
.blueHover:hover,
.redHover:hover,
.orangeHover:hover,
.blackHover:hover,
.wetHover:hover {
  color: var(--actionText, white);
  background-color: var(--actionColor);
}
.greenHover:disabled:hover,
.blueHover:disabled:hover,
.redHover:disabled:hover,
.orangeHover:disabled:hover,
.blackHover:disabled:hover,
.wetHover:disabled:hover {
  color: var(--silver);
  background-color: var(--concrete);
}
.proActionForm {
  --actionText: black;
}

.nSolid, .nHover {
  --actionColor: var(--neptuneColor);
}
.whiteSolid {
  --actionColor: var(--whiteT);
  --actionText: var(--blackT);
}
.whiteHover {
  background-color: transparent;
  --actionColor: white;
  --actionText: black;
}
.blackSolid {
  --actionColor: var(--blackT);
  --actionText: var(--whiteT);
}
.blackHover {
  --actionColor: var(--dark);
  --actionText: white;
}
.greenSolid, .greenHover {
  --actionColor: var(--nephritis);
}
.blueSolid, .blueHover {
  --actionColor: var(--peterriver);
}
.redSolid, .redHover {
  --actionColor: var(--pomegranate);
}
.yellowSolid, .yellowHover {
  --actionColor: var(--orange);
}
.orangeSolid, .orangeHover {
  --actionColor: var(--carrot);
}
.darkOrangeSolid { 
  --actionColor: var(--pumpkin);
}
.tealSolid {
  --actionColor: var(--greenSea);
}
.purpleSolid {
  --actionColor: var(--wisteria);
}
.midnightSolid {
  --actionColor: var(--midnightblue);
}
.wetSolid, .wetHover {
  --actionColor: var(--wetasphalt);
}

.roundAction {
  border-radius: 50px;
}

.iconAction {
	padding: 0.25rem;
	background-color: transparent;
	transition: all 250ms ease;
	font-size: 1vmax;
}
.iconAction:focus-visible, .iconAction:active {
  outline: dotted thick;
}

.actionIconWrap {
  margin: 0 0.5rem;
}
.actionIconText {
  color: white;
  text-transform: capitalize;
  line-height: 1rem;
  display: block;
  white-space: nowrap;
  border-bottom-style: hidden;
  text-decoration: none;
}
.actionIconWrap:hover .actionIconText {
  text-decoration: underline;
}

.miniAction {
  min-width: 1rem;
  min-height: 1rem;
  padding: 0 3px;
  border-width: 1px;
  border-style: solid;
  border-color: transparent;
  border-radius: 3px;
  background-color: transparent;
  cursor: pointer;
}
.miniAction:hover {
  opacity: 1;
  border-color: inherit;
}
.miniAction:focus-visible {
  outline: 1px dotted;
}

.activeIndicator:where(:focus-visible,:active) {
  outline: dotted;  
}

.mini15x {
  min-width: 1.5rem;
  min-height: 1.5rem;
}
.mini2x {
  min-width: 2rem;
  min-height: 2rem;
}

.textAction {
  margin: 0px;
  border: none;
  padding: 0px;
  background-color: transparent;
  cursor: pointer;
}
.textAction:hover {
  text-decoration: underline; 
}

.textLinkButton, .inlineLink,
.leapText, .leapBar {
  font-size: var(--tx0);
}

.textLinkButton {
  color: var(--belizeHole);
  cursor: pointer;
  margin: 0px;
  border: none;
  padding: 0px;
  background-color: transparent;
}

.textLinkButton:active {
  background-color: var(--belizeHole);
  color: white;
}

.inlineLink {
  color: black;
  background-color: transparent;
  border: none;
}
.inlineLink:hover {
  text-decoration: underline;
}
.inlineLink:disabled { 
  opacity: 1;
  user-select: text;
}
.inlineLink:disabled:hover {
  text-decoration: none;
  cursor: text;
  user-select: text;
  opacity: 1;
}
.smplTip::after,
.liteTip::after,
.liteTipW::before {
  content: attr(data-tip);
  position: absolute;
  margin: 0;
  padding: 0.25em 0.5em;
  border-radius: 3px;
}
.smplTip::after {
  background-color: rgb(230,230,230);
  color: black;
  font-size: 0.7rem;
}
.liteTip::after, .liteTipW::before {
  background-color: rgb(0,0,0);
  color: white;
  font-size: 0.7rem;
}
.liteTip::after {
  transform: translate(-55%,-110%);
}
.liteTipW::before {
  transform:translate(25%,-110%);
}

.leapText {
  min-width: 1rem;
	min-height: 1rem;
	text-transform: uppercase;
	background-color: transparent;
  border: 1px solid transparent;
  border-bottom-color: white;
  word-break: break-all;
}
.leapText:where(:hover,:focus-visible,:active) {
  color: var(--peterriver);
  border-bottom-color: var(--peterriver);
}

.leapBar, .leapLine {
  width: 100%;
  border-top: 1px inset transparent;
  border-left-style: solid;
  border-left-color: white;
  cursor: pointer;
}
.leapBar {
  min-height: 4vmin;
  font-size: calc(0.6rem + 0.5vmin);
  font-weight: 400;
	padding: calc(0.5em + 0.5vw) calc(0.5em + 0.5vw);
	border-bottom: 1px outset var(--silverfade);
	border-left-width: 0.5vmax;
  background-color: transparent;
	color: var(--black);
  word-break: keep-all;
  word-wrap: normal;
}
.leapBar:where(:hover,:focus-visible,:active) {
  background-color: var(--silverfade);
}

.leapBonus::before {
  content: attr(data-bonus);
  position: absolute;
  top: 8.25dvh;
  right: 15vmax;
  z-index: 11;
  padding: 0.5em 1ch;
  background-color: rgb(245,245,245);
  color: black;
  font-size: 0.9rem;
  line-height: 1.5;
  min-height: 3em;
  width: auto;
  border: 0.3em solid;
  border-radius: 0 0 0 10px;
  box-shadow: var(--dropShadow00);
  white-space: pre-wrap;
  pointer-events: none;
  opacity: 0;
}
.leapBonus[data-color=orange]::before { border-color: var(--pumpkinfrost)}
.leapBonus[data-color=green]::before { border-color: var(--emerald) }
.leapBonus[data-color=blue]::before { border-color: var(--peterriver); }

@media (orientation: portrait) {
  .leapBonus::before {
    top: 8.25vmin;
    right: minmax(11.2vmin, 15.2vmax);
  }
}
@media screen and (prefers-reduced-motion: no-preference) { 
  .leapBonus::before {
    transition: opacity 250ms ease-in-out;
  }
}
  
.leapLine {
  display: grid;
  grid-template-rows: min-content;
  grid-template-columns: minmax(1ch, 0.5fr) repeat( auto-fit, minmax(0px, 1fr) );
	grid-auto-flow: column;
	grid-gap: 2vmin;
	align-items: center;
	padding: 2vmin;
	border-bottom: 1px outset grey;
	border-left-width: 1vmax;
  background-color: white;
  color: var(--black);
  overflow: hidden;
  word-break: break-all;
  word-wrap: break-word;
  box-shadow: var(--dropShadow000);
}
.leapLine > span:first-child {
 font-weight: 600;
}
.leapLine:where(:hover,:focus-visible,:active) {
  box-shadow: var(--dropShadow0);
  border-bottom-color: black;
}

.jump {
  border-bottom-color: white;
}

.roundActionIcon, .roundRadioSelect {
  height: 2.5rem;
  background-color: transparent;
  text-align: center;
}
.roundActionIcon {
  display: block;
  width: 2.5rem;
  padding: 5px;
  border-radius: 50%;
}
.roundRadioSelect {
  display: flex !important;
  border-bottom: none !important;
  flex-direction: row;
  align-items: center;
  margin: 0.5rem;
  padding: 1rem;
  border-radius: 25rem;
}

.dbblRound {
  width: 5rem;
  height: 5rem;
}
label.dbblRound {
  width: 6rem;
  height: 6rem;
}
.trpplRound {
  width: 7.5rem;
  height: 7.5rem;
}
label.trpplRound {
  width: 8.5rem;
  height: 8.5rem;
}
.qdpplRound {
  width: 10rem;
  height: 10rem;
  font-size: var(--txx0);
}
label.qdpplRound {
  width: 11rem;
  height: 11rem;
  font-size: var(--txx0);
}

.holdpill {
  background-color: var(--asbestos);
  color: var(--wetasphalt);
  font-weight: 600;
  border: 0.2em solid var(--wetasphalt);
  border-radius: 50px;
  padding: 2px 0.25em 2px 0;
  line-height: 1;
}
.holdpill > .react-contextmenu-wrapper {
  display: flex;
  align-items: center;
}
.holdblock {
  background-color: var(--asbestos);
  color: var(--wetasphalt);
  border-top: 0.1em solid;
  border-bottom: 0.1em solid;
  height: 100%;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}
n-faH { line-height: 0; }

button.variableInput.medBig { height: 40px; }
button.variableInput.big { height: 48px; }
button.variableInput.bigger { height: 56px; }
button.variableInput.biggest { height: 64px; }

.buttonLayerCorrect { height: 1em; }

.taskLink {
  /*font-family: var(--styled-font);*/
  margin: 0.75dvh 0;
  width: 5.5dvh;
  min-height: 5.5dvh;
  border-radius: 50%;
  font-size: 3.5dvh;
  cursor: pointer;
}

/* ------ Adaptive Round Nav Buttons ----- */
.taskLink {
  --task-back-color: rgb(25,25,25);
  --task-front-color: var(--silver);
  --box-shadow-color: var(--neptuneColor);
  background-color: var(--task-back-color);
  color: var(--task-front-color);
}
.taskLink:where(:hover,:active),
.taskLink.onTL {
  color: var(--task-back-color);
  background-color: var(--task-front-color);
  box-shadow: var(--dropShadow00);
}
.taskLink:focus-visible,
.taskLink > input[type=radio]:checked + svg,
.taskLink > input[type=checkbox]:checked + svg{
  outline-style: hidden;
  outline-color: transparent;
}
.taskLink:focus-visible {
  box-shadow: 
    0 0 0 3px var(--task-back-color),
    0 0 0 5px var(--box-shadow-color);
}
.taskLink > input[type=radio]:checked + svg,
.taskLink > input[type=checkbox]:checked + svg {
  border-radius: 50%;
  color: var(--task-back-color);
  background-color: var(--task-front-color);
  box-shadow: 
    0 0 0 6px var(--box-shadow-color),
    0 0 0 10px var(--task-back-color),
    0 0 0 12px var(--box-shadow-color);
}

.auxTip {
  vertical-align: middle;
}
.taskTip::after, 
.auxTip::before, 
.auxTipScale::before {
  position: absolute;
  content: attr(aria-label);
  margin: 0.25dvh 0;
  max-width: -webkit-fill-available;
  max-width: max-content;
  background-color: var(--task-front-color);
  color: var(--task-back-color);
  box-shadow: var(--dropShadow0);
  z-index: 11;
}
.taskTip::after {
  left: 7.5dvh;
}
.auxTip::before, 
.auxTipScale::before {
  right: 14dvh;
}

@media (orientation: portrait) {
  .taskTip::after {
    left: 7.5vmin;
    margin: 0;
  }
  .auxTip::before {
    margin: 0.15dvh 0;
    right: 12dvh;
  }
  .auxTipScale::before {
    margin: 0.25vmin 0;
    right: 15.5vmin;
  }
}

.lightTheme.overMenuBar .taskTip::after {
  --task-front-color: var(--silver);
  --task-back-color: var(--blackT);
}

/* switch variables for context */
.taskLink.butBlue {
  --task-front-color: var(--peterriver);
  --box-shadow-color: var(--peterriver);
}
.taskLink.butRed {
  --task-front-color: var(--alizarin);
  --box-shadow-color: var(--alizarin);
}
.taskLink.butYellow {
  --task-front-color: var(--orange);
  --box-shadow-color: var(--orange);
}
.taskLink.fGreen {
  --box-shadow-color: var(--nephritis);
}
.taskLink.defaultAcc {
  --task-front-color: var(--neptuneColor);
  --task-back-color: var(--clouds);
  --box-shadow-color: var(--neptuneColor);
}

.lightTheme.overMenuBar .taskLink {
  --task-front-color: var(--blackT);
  --task-back-color: var(--clouds);
}
.lightTheme.overMenuBar .taskLink:where(:hover,:active),
.lightTheme.overMenuBar .taskLink.onTL {
  --task-front-color: var(--silver);
  --task-back-color: var(--blackT);
}

.taskLink > input[type=radio]:disabled + svg,
.taskLink > input[type=checkbox]:disabled + svg { 
  cursor: not-allowed;
  filter: grayscale(0.9);
}

.followTask i {
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 5.5dvh;
  height: 5.5dvh;
  font-size: 2.5dvh;
  font-weight: 600;
  color: var(--task-front-color);
  transition: all 150ms ease-in-out;
}
.followTask i:first-child {
  position: absolute;
}
.followTask i:last-child {
  border-width: 0.3vh;
  border-style: inset;
  border-color: var(--task-front-color);
  border-radius: 50%;
}
.followTask:hover i {
  color: var(--task-back-color);
}
.followTask:disabled,
.followTask:disabled > span {
  opacity: 1 !important;
  cursor: context-menu !important;
}
.followTask.fGreen i {
  border-color: var(--emerald);
}
.followTask.fGreen:hover {
  background-color: var(--emerald);
}
.tideFollowTip.fGreen:before {
  color: var(--task-back-color);
  background-color: var(--emerald);
}

.saveTask {
  font-weight: 400;
  font-style: italic;
  font-size: var(--tx0);
  height: var(--tx5);
  line-height: 1.5;
  color: black;
}
.saveTask:disabled,
.saveTask:disabled:hover{ 
  opacity: 1; 
  cursor: default;
  border-bottom-color: transparent;
}
.saveTask:enabled:hover:before {
  font-weight: 600;
  content: "\2713";
  display: inline-block;
  width: 1.25em;
  height: 1.5rem;
}
.saveTask:enabled:hover > .guessTask {
  display: none;
}

.toggleOff {
  transition: background-color 400ms ease,
              color 200ms ease;
  color: var(--black);
  background-color: var(--clouds);
}
.toggleOn, .toggleOff:hover {
  color: var(--clouds);
  background-color: var(--black);
}

.liteToolOn, 
.liteToolOff {
  min-height: 3dvh;
  padding: 0 5px;
  line-height: 1.5;
  font-size: var(--tx0);
  color: black;
  letter-spacing: 1px;
	text-transform: capitalize;
	overflow: hidden;
	border-width: 0.5px;
	border-style: solid;
	border-top-color: transparent;
	border-right-color: rgb(227,231,232);
	border-bottom-color: transparent;
	border-left-color: rgb(227,231,232)
}
.liteToolOn { 
  background-color: var(--navIndicatorB);
  cursor: default; }
.liteToolOff { background-color: var(--navIndicatorA); }
.liteToolOff:active { 
  background-color: var(--neptuneColor); 
}

.liteTool { cursor: pointer; }
.liteTool input[type="checkbox"] {
  filter: grayscale(1) invert(0.5) brightness(1);
  overflow: hidden;
  cursor: pointer;
}
.liteTool input[type="checkbox"]:checked {
  filter: grayscale(1) invert(1) brightness(1);
}

.interForm {
  background-color: transparent;
  margin: 0;
  
}
.interForm p {
  padding: 0;
  display: flex;
  align-items: flex-end;
  justify-content: space-between;
}
.interForm label {
  font-size: var(--sm9);
  text-indent: 0.5ch;
}

.interInput {
  border-top: 0.5px outset lightgray;
  border-right: 0.5px inset lightgray;
  border-left: 0.5px outset lightgray;
  background-color: transparent;
  margin: 0 0 0 0.5ch;
  width: 18ch;
  background-color: var(--cloudstrans);
}

input[type='checkbox'].interInput,
input[type='radio'].interInput {
  width: 1.25rem;
}

.interSelect {
  line-height: 1;
  background-color: var(--cloudstrans);
  margin: 0 0 0 0.5ch;
}
.interSelect:disabled {
  opacity: 1;
  color: black;
  border: 1px dotted lightgray
}

.showValid:invalid {
  box-shadow: 0 0 10px var(--sunflowerfade);
}

.colorSwatch {
  width: 1.7rem;
  height: 1.7rem;
  min-height: 1.7rem;
  padding: 0;
  cursor: pointer;
}
.colorSwatch:optional,
.colorSwatch:required {
  border-style: none;
}
.colorSwatch::-webkit-color-swatch,
.colorSwatch::-webkit-color-swatch-wrapper {
  border: none;
  border-radius: 50%;
  padding: 0;
}

.defaultAcc #pnFindButton {
  color: var(--neptuneColor);
  background-color: white;
  border: 1px solid var(--neptuneColor);
  height: 100%;
}
.defaultAcc #pnFindButton:hover {
  color: white;
  background-color: var(--neptuneColor);
}

.defaultAcc #pnFind {
  border-color: var(--neptuneColor);
  border-right-color: transparent;
  letter-spacing: 1px;
  -webkit-appearance: none;
  -moz-appearance: none;
}
.defaultAcc #pnFind:focus-visible {
  border-color: var(--neptuneColor);
  border-right-width: 0px;
}