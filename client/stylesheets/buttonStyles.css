/* the point of this file is to have them all in one place so as to
 eventually figure out a way to limit the number of styles */
.action, .smallAction {
  font-size: medium;
  letter-spacing: 1px;
  padding: 0.5ch 1ch;
  min-height: 32px;
  line-height: 1;
}
.action {
  font-weight: 600;
	text-transform: uppercase;
	overflow: hidden;
}
.smallAction {
  min-width: 2rem;
}

.iconAction {
	padding: 0.25rem;
	background-color: transparent;
	transition: all 250ms ease;
}
.iconAction:focus, .iconAction:active {
  outline: dotted thick;
}

.closeAction {
  font-weight: 800;
	min-width: 3vmax;
  min-height: 3vmax;
  padding: 0 10px;
	text-transform: uppercase;
	overflow: hidden;
}

.miniAction {
  min-width: 1rem;
  min-height: 1rem;
  border-width: 1px;
  border-bottom-style: solid;
  border-bottom-color: transparent;
  background-color: transparent;
}
.miniAction:hover {
  opacity: 1;
  border-bottom-color: inherit;
}
.miniAction:focus {
  outline: 1px dotted;
}

.hoverAction {
  cursor: pointer;
}
.hoverAction:hover, .hoverAction:focus-within {
  outline-color: var(--neptuneColor);
  outline-style: dotted;
  outline-offset: -0.25vmax;
}

.clear {
  border: 0.05em solid;
  border-radius: 0;
  background-color: transparent;
}
.clear:hover {
  background-color: rgba(255,255,255,0.1);
}

.clearWhite,
.clearBlack,
.clearGreen,
.clearBlue,
.clearRed,
.clearOrange,
.clearTeal,
.clearPurple {
  background-color: transparent;
  border-width: 1.5px;
  border-style: solid;
  font-size: medium;
  font-weight: 400;
  text-shadow: 0 0 0 black;
}
.clearWhite:hover,
.clearGreen:hover,
.clearBlue:hover,
.clearRed:hover,
.clearOrange:hover,
.clearTeal:hover,
.clearPurple:hover {
  color: black;
}
  
.clearWhite {
  color: white;
  border-color: white;
}
.clearWhite:hover {
  background-color: white;
}
.clearBlack {
  color: var(--blackT);
  border-color: var(--blackT);
  background-color: transparent;
}
.clearBlack:hover {
  color: var(--clouds);
  background-color: var(--blackT);
}
.clearBlack:disabled {
  color: var(--concrete);
  border-color: var(--concrete);
}

.clearGreen {
  color: var(--emerald);
  border-color: var(--emerald);
}
.clearGreen:hover {
  background-color: var(--emerald);
}

.clearBlue {
  color: var(--peterriver);
	border-color: var(--peterriver);
}
.clearBlue:hover {
	background-color: var(--peterriver);
}

.clearRed {
  color: var(--alizarin);
  border-color: var(--alizarin);
}
.clearRed:hover {
  background-color: var(--alizarin);
}

.clearOrange {
  color: var(--orange);
  border-color: var(--orange);
}
.clearOrange:hover {
  background-color: var(--orange);
  color: black;
}

.clearTeal {
  color: var(--turquoise);
  border-color: var(--turquoise);
}
.clearTeal:hover {
  background-color: var(--turquoise);
}

.clearPurple {
  color: var(--amethyst);
  border-color: var(--amethyst);
}
.clearPurple:hover {
  background-color: var(--amethyst);
}

.activeIndicator:focus, .activeIndicator:active {
  outline: dotted;  
}

.mini15x {
  min-width: 1.5rem;
  min-height: 1.5rem;
}
.mini2x {
  min-width: 2rem;
  min-height: 2rem;
}

.textAction {
  margin: 0px;
  border: none;
  padding: 0px;
  background-color: transparent;
  cursor: pointer;
}
.textAction:hover {
  text-decoration: underline; 
}

.textLinkButton, .inlineLink,
.leapText, .leapBar {
  font-size: 1rem;
}

.textLinkButton {
  color: var(--belizeHole);
  cursor: pointer;
  margin: 0px;
  border: none;
  padding: 0px;
  background-color: transparent;
}

.inlineLink {
  color: black;
  background-color: transparent;
  border: none;
}
.inlineLink:hover {
  text-decoration: underline;
}

.leapText {
  min-width: 1rem;
	min-height: 1rem;
	text-transform: uppercase;
	background-color: transparent;
  border: 1px solid transparent;
  border-bottom-color: white;
  word-break: break-all;
}
.leapText:hover, .leapText:focus, .leapText:active {
  color: var(--peterriver);
  border-bottom-color: var(--peterriver);
}

.leapBar, .leapLine {
  width: 100%;
  border-top: 1px inset transparent;
  border-left-style: solid;
  border-left-color: white;
  cursor: pointer;
}
.leapBar {
  min-height: 4vh;
  font-size: calc(0.6rem + 0.4vw);
  font-weight: 400;
	padding: calc(0.5em + 0.5vw) calc(0.5em + 0.5vw);
	border-bottom: 1px outset var(--silverfade);
	border-left-width: 0.5vmax;
  background-color: transparent;
	color: var(--black);
  word-break: keep-all;
  word-wrap: normal;
}
.leapBar:hover, .leapBar:focus, .leapBar:active {
  background-color: var(--silverfade);
}
  
.leapLine {
  display: grid;
  grid-template-rows: min-content;
  grid-template-columns: minmax(1ch, 0.5fr) repeat( auto-fit, minmax(0px, 1fr) );
	grid-auto-flow: column;
	grid-gap: 2vmin;
	align-items: center;
	padding: 2vmin;
	border-bottom: 1px outset grey;
	border-left-width: 1vmax;
  background-color: white;
  color: var(--black);
  overflow: hidden;
  word-break: break-all;
  word-wrap: break-word;
  box-shadow: var(--dropShadow000);
}
.leapLine > span:first-child {
 font-weight: 600;
}
.leapLine:hover, .leapLine:focus, .leapLine:active {
  box-shadow: var(--dropShadow0);
  border-bottom-color: black;
}

.jump {
  border-bottom-color: white;
}

.roundActionIcon, .roundRadioSelect {
  height: 2.5rem;
  background-color: transparent;
  text-align: center;
}
.roundActionIcon {
  display: block;
  width: 2.5rem;
  padding: 5px;
  border-radius: 50%;
}
.roundRadioSelect {
  display: flex !important;
  border-bottom: none !important;
  flex-direction: row;
  align-items: center;
  margin: 0.5rem;
  padding: 1rem;
  border-radius: 25rem;
}

.dbblRound {
  width: 5rem;
  height: 5rem;
}
label.dbblRound {
  width: 6rem;
  height: 6rem;
}
.trpplRound {
  width: 7.5rem;
  height: 7.5rem;
}
label.trpplRound {
  width: 8.5rem;
  height: 8.5rem;
}
.qdpplRound {
  width: 10rem;
  height: 10rem;
  font-size: 2rem;
}
label.qdpplRound {
  width: 11rem;
  height: 11rem;
  font-size: 2rem;
}

button.variableInput.medBig { height: 40px; }
button.variableInput.big { height: 48px; }
button.variableInput.bigger { height: 56px; }
button.variableInput.biggest { height: 64px; }

.buttonLayerCorrect { height: 1em; }

.taskLink {
  margin: 0.75vh 0;
  width: 5.5vh;
  height: 5.5vh;
  border-radius: 50%;
  font-size: 3.5vh;
  cursor: pointer;
}

/* ------ Adaptive Round Nav Buttons ----- */
.taskLink {
  --task-back-color: rgb(25,25,25);
  --task-front-color: var(--silver);
  --box-shadow-color: var(--silver);
  background-color: var(--task-back-color);
  color: var(--task-front-color);
}
.taskLink:hover, 
.taskLink:active,
.taskLink.onTL {
  color: var(--task-back-color);
  background-color: var(--task-front-color);
  box-shadow: var(--dropShadow00);
}
.taskLink:focus,
.taskLink > input[type=radio]:checked + svg,
.taskLink > input[type=checkbox]:checked + svg{
  outline-style: hidden;
  outline-color: transparent;
}
.taskLink:focus {
  box-shadow: 
    0 0 0 3px var(--task-back-color),
    0 0 0 5px var(--box-shadow-color);
}
.taskLink > input[type=radio]:checked + svg,
.taskLink > input[type=checkbox]:checked + svg {
  border-radius: 50%;
  color: var(--task-back-color);
  background-color: var(--task-front-color);
  box-shadow: 
    0 0 0 6px var(--box-shadow-color),
    0 0 0 10px var(--task-back-color),
    0 0 0 12px var(--box-shadow-color);
}

/* switch variables for context */
.taskLink.butBlue {
  --task-front-color: var(--peterriver);
  --box-shadow-color: var(--peterriver);
}
.taskLink.butRed {
  --task-front-color: var(--alizarin);
  --box-shadow-color: var(--alizarin);
}
.taskLink.butYellow {
  --task-front-color: var(--orange);
  --box-shadow-color: var(--orange);
}

.lightTheme .taskLink {
  --task-front-color: var(--asbestos);
  --task-back-color: var(--clouds);
}

.taskLink > input[type=radio]:disabled + svg,
.taskLink > input[type=checkbox]:disabled + svg { 
  cursor: not-allowed;
  filter: grayscale(0.9);
}

.followTask i {
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 5.5vh;
  height: 5.5vh;
  font-size: 2.5vh;
  font-weight: 600;
  color: var(--task-front-color);
  transition: all 150ms ease-in-out;
}
.followTask i:first-child {
  position: absolute;
}
.followTask i:last-child {
  border-width: 0.3vh;
  border-style: inset;
  border-color: var(--task-front-color);
  border-radius: 50%;
}

.followTask:hover i {
  color: var(--task-back-color);
}
.followTask:disabled,
.followTask:disabled > span {
  opacity: 1 !important;
  cursor: context-menu !important;
}
.followTask.fGreen i {
  border-color: var(--emerald);
}
.followTask.fGreen:hover {
  background-color: var(--emerald);
}

.toggleOff {
  transition: background-color 400ms ease,
              color 200ms ease;
  color: var(--black);
  background-color: var(--clouds);
}
.toggleOn, .toggleOff:hover {
  color: var(--clouds);
  background-color: var(--black);
}

.liteToolOn, 
.liteToolOff {
  min-height: 3vh;
  padding: 0 5px;
  line-height: 1.5;
  font-size: medium;
  color: black;
  letter-spacing: 1px;
	text-transform: capitalize;
	overflow: hidden;
	border-width: 0.5px;
	border-style: solid;
	border-top-color: transparent;
	border-right-color: rgb(227,231,232);
	border-bottom-color: transparent;
	border-left-color: rgb(227,231,232)
}
.liteToolOn { 
  background-color: var(--navIndicatorB);
  cursor: default; }
.liteToolOff { background-color: var(--navIndicatorA); }
.liteToolOff:active { background-color: var(--navIndicatorB); }

.interSelect {
  line-height: 1;
  font-size: 1rem;
  background-color: transparent;
  margin: 0 0.5ch;
}
.interSelect:disabled {
  opacity: 1;
  color: black;
  border: 1px dotted lightgray
}

/*@media (orientation: portrait) {*/
  
/*}*/