/* River */
.stoneGrid {
  display: grid;
  width: 100%;
  grid-template-columns: 1fr 2.25fr 1fr;
  grid-template-rows: 1fr auto auto auto auto auto;
  grid-template-areas: 
    'stoneF stoneF stoneF'
    'pathC undoS menu1'
    'comIn comIn comIn'
    'comB comB comB'
    'alert alert alert'
    'feedA feedA feedA';
  justify-content: stretch;
  align-content: stretch;
  grid-gap: 0 0;
  /*isolation: isolate;*/
}

.altTitle {
  grid-area: alert;
  padding: 0.5vh 1vw;
  text-align: center;
  align-self: center;
}
.riverErrors {
  grid-area: feedA;
  margin: 1vh 0;
}

.stoneFrame {
  grid-area: stoneF;
  max-width: 14vmax;
  min-height: 14vmax;
  padding-top: 0.5vmax;
  display: flex;
  justify-content: center;
  align-items: center;
}
.riverPath {
  grid-area: pathC;
  padding-left: 0.5vmax;
}
.stoneComm {
  grid-area: menu1;
  flex-direction: row-reverse;
  padding-right: 0.5vmax;
}
.stoneComm > button {
  background-color: transparent;
  color: var(--asbestos);
  font-size: initial;
}
.stoneBase {
  grid-area: comIn;
  padding: 0;
  min-width: auto;
  max-width: 100%;
  min-height: 8rem;
  max-height: 20rem;
  /*background-color: var(--clouds);*/
  border-style: solid !important;
  border-color: black;
}
.stoneExtra {
  grid-area: comB;
}
button.stoneExtra {
  width: 100%;
  height: auto;
  margin: 0;
  padding: 0.25rem;
}
.extraFail {
  font-size: calc(0.5rem + 0.75vmax);
  color: white;
  background-color: var(--pomegranate);
  --high-color: var(--alizarin);
}

.riverPath, .stoneComm {
  display: flex;
  flex-wrap: nowrap;
  align-items: center;
  min-width: 100%;
  color: var(--asbestos);
}
.riverPath:where(:hover,:focus,:active),
.stoneComm:where(:hover,:focus,:active) > button {
  color: var(--silver);
}

.undoStepWrap {
  grid-area: undoS;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  min-height: 1.75rem;
  text-align: center;
}
.undoStepWrap button {
  line-height: 1;
  font-size: 1.3vmax;
  width: 100%;
  min-height: 1.75rem;
  color: var(--concrete);
  text-transform: capitalize;
  border-right: 1px solid dimgray;
  border-left: 1px solid dimgray;
}
.moreStepAction {
  min-width: 20%;
  cursor: pointer;
}
.stoneRing {
  position: relative;
  z-index: 0;
  width: 13vmax;
  height: 13vmax;
}
.spinOuterSVG svg {
  animation: spinAround 10s infinite linear;
}

.cssProgRing {
  width: 13vmax;
  aspect-ratio: 1 / 1;
  border-radius: 50%;
  background: conic-gradient(
    var(--high-color) var(--stonePercent, 0%),
    rgb(40,40,40) 0%
  );
  display: grid;
  place-items: center;
}
.cssProgRing::after {
  content: '';
  width: 12.25vmax;
  border-radius: 50%;
  background-color: var(--dark);
  aspect-ratio: 1 / 1;
}
.cssProgCore {
  position: absolute;
	text-align: center;
	line-height: 1;
}

.stone {
	margin: 0;
  border-width: 0.75vmax;
  border-style: solid;
  width: 11.5vmax;
  height: 11.5vmax;
  font-size: calc(0.5rem + 0.75vmax);
  font-weight: bolder;
  text-shadow: 0 0 25px #000;
  letter-spacing: 0.1ch;
	text-transform: uppercase;
	word-break: break-word;
  color: white;
  background-position: 50% 50%;
  background-repeat: no-repeat;
  background-origin: content-box;
  background-size: 150%;
  background-color: var(--stoneback, transparent);
  border-color: var(--stoneborder, transparent);
  border-radius: 50%;
  display: flex;
  flex-flow: column nowrap;
  align-items: center;
  justify-content: center;
  /*transition: 0.25s;*/
  opacity: 1;
  /*will-change: transform;*/
  cursor: pointer;
}

.stone:where(:focus-visible,:hover),
.crackedTop:where(:focus-visible,:hover), 
.crackedBot:where(:focus-visible,:hover) { 
  background-color: var(--high-color) !important; 
}

.stone::after,
.crackedTop::after,
.crackedBot::after {
  content: "";
  position: absolute;
  z-index: -1;
  width: 11.5vmax;
  background-color: var(--stoneborder);
  /*opacity: 0;*/
  pointer-events: none;
}
.stone::after {
  align-self: center;
  justify-self: center;
  height: 11.5vmax;
  border-radius: 50%;
  opacity: 1;
}
.stone:active::after,
.crackedTop:active::after,
.crackedBot:active::after {
  animation: pulselite 500ms;
  animation-iteration-count: infinite;
}
.stone:disabled:active,
.stone:disabled:active::after,
.crackedTop:disabled:active,
.crackedTop:disabled:active::after, 
.crackedBot:disabled:active,
.crackedBot:disabled:active::after {
  animation: none;
}

.stone label {
  width: 100%;
  padding: 0;
  font-size: calc(0.5rem + 0.5vmax);
}
.stone label,
.crackedTop label,
.crackedBot label,
.extraFail label {
  line-height: 1.2;
  cursor: pointer;
}

.stone:focus-visible {
	outline: 1px dotted;
}
.stone:disabled {
  opacity: 0.3;
}

.doneStoneMask, .blockStone, .authBanMask {
  position: relative;
  transition: all 200ms ease-out;
  -webkit-filter: grayscale(75%);
  filter: grayscale(75%);
}

.doneStoneMask::before,
.blockStone::before,
.authBanMask::before {
  text-align: center;
  text-shadow: 1px 1px black;
  position: absolute;
  inset: 50% 50%;
  transform: translate(-50%, -50%) rotate(0deg);
  aspect-ratio: 1;
  z-index: 3;
}
.doneStoneMask::before,
.authBanMask::before {
  font-size: 10vmax;
  filter: opacity(0.2);
  width: 100%;
}

.doneStoneMask::before {
  content: 	"\002714";
}

.authBanMask::before {
  content: 	"\1F6C7";
}

.blockStone::before {
  content: 'All noncons and shortages must be resolved';
  font-size: calc(0.5rem + 1vmin);
  width: calc(100% - 2vmin);
  padding: 1vmin;
  max-height: 10vmax;
  align-content: center;
  background-color: var(--black);
  border-radius: 10px;
  word-break: break-word;
  word-wrap: break-word;
  text-wrap: pretty;
}

.crackedTop, .crackedBot {
  width: 11.5vmax;
  height: 5.75vmax;
  position: relative;
  background-position: top;
  background-size: 80%;
  background-repeat: no-repeat;
  font-size: calc(0.5rem + 0.75vmax);
  color: white;
  box-shadow: var(--dropShadow1);
}
.crackedTop {
  border-radius: 9rem 9rem 0 0;
  margin: -0.25em 0.25em 0 0.25em;
  background-color: var(--greenSea);
}
.crackedBot {
  border-radius: 0 0 9rem 9rem;
  margin: 0 0.25em -0.25em 0.25em;
  background-image: url(test.svg);
  background-color: var(--pomegranate);
  --high-color: var(--alizarin);
  --stoneborder: var(--pomegranate);
}
.crackedTop::after {
  top: -5%;
  left: 0;
  height: 6vmax;
  border-radius: 9rem 9rem 0 0;
}
.crackedBot::after {
  bottom: -5%;
  left: 0;
  height: 6vmax;
  border-radius: 0 0 9rem 9rem;
}
.fail2step.crackedBot::after {
  transition: box-shadow 100ms linear;
  opacity: 1;
  box-shadow: 0 0 2vmax 1vmax var(--stoneborder);
}
.extraFail:active {
  transition: outline-width 100ms linear;
  outline-width: 3px;
  outline: solid var(--high-color);
  outline-offset: 0px;
}

.nestBox {
  padding: 3vh 1vw;
  font-size: calc(0.5rem + 0.75vmax);
}
.nestBox p {
  margin: 1vh 2vw;
}
.nestBox p:nth-child(2) {
  font-size: calc(0.5rem + 1vmax);
}

.nowUp {
  font-weight: bolder;
}

.ncAct.pass2step {
  background-color: var(--high-color);
  outline-offset: 2px;
  outline: 2px solid var(--high-color);
}
.ncAct:hover { background-color: var(--high-color); }
.ncAct {
  position: relative;
  z-index: 5;
}
.ncAct::before {
  content: "";
  position: absolute;
  z-index: 1;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background-color: var(--high-color);
  opacity: 0;
  pointer-events: none;
}
.ncAct:active::before {
  animation: pulselite 500ms;
  animation-iteration-count: infinite;
}

.riverInfo {
  background-color: var(--belizeHole);
  --high-color: var(--peterriver);
  background-image: url(repair.svg);
}
.riverG {
  background-color: var(--nephritis);
  --high-color: var(--emerald);
  background-image: url(inspectMini.svg);
}

.riverNG {
  background-color: var(--pomegranate);
}
.riverNG:where(:hover,:active) {
  background-color: var(--alizarin);
}

#goNcFld, #goNcFixAdd, #goNcAdd {
  --pro_prob: var(--pomegranate);
}
#goShAdd {
  --pro_prob: var(--carrot);
}

n-trib-row, n-short-row, .testFail {
	animation-name: fadeIn;
  animation-duration: 1s;
  animation-timing-function: var(--scottsCurve);
  animation-iteration-count: 1;
  overflow: hidden;
}
n-trib-row, n-short-row {
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  margin: 12px 0;
  padding: 0px;
  min-width: 13vmax;
  max-width: 14vmax;
	min-height: 65px;
	transition: background-color 250ms ease-in;
}
.tribRed {
  background-color: var(--pomegranatefrost);
}
n-trib-row:last-child,
n-short-row:last-child {
  margin-bottom: 32px;
}

n-trib-row, n-short-row {
  border-left: 0.25rem solid var(--black);
}

n-trib-info {
  width: 60%;
  display: flex;
  flex-direction: column;
  flex-wrap: nowrap;
  align-items: flex-start;
  justify-content: center;
  padding: 8px;
  word-break: break-word;/*weird no standard thing but it works*/
  word-wrap: break-word;
  font-size: calc( 0.5rem + 0.75vmin);
}
n-trib-action {
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  align-items: center;
  justify-content: center;
  width: 40%;
}
n-trib-action-main {
  width: 70%;
  height: 100%;
}
n-trib-action-main > button,
n-trib-action-all > button {
  border: none;
  line-height: 1.5;
  width: 100%;
  height: 100%;
  color: white;
  cursor: pointer;
	vertical-align: middle;
  transition: background-color 500ms ease-in-out;
  background-origin: content-box;
  text-overflow: ellipsis;
  text-overflow: fade;
}
n-trib-action-main > button {
  background-repeat: no-repeat;
  background-position: 50% 25%;
  background-size: 100%;
}
n-trib-action-all > button {
  background-position: 0% 0%;
  background-size: 50%;
}
n-trib-action-main > button::after {
  content: attr(data-name);
  position: relative;
  z-index: 2;
  left: 0;
  bottom: -20%;
}

n-trib-action-main > button::after,
n-trib-action-main > span > i {
  font-size: calc( 0.5rem + 0.5vmin);
}
@media all and (max-width: 1000px), (orientation: portrait) {
  n-trib-action-main > button {
    background-position: 50% 50%;
  }
  n-trib-action-main > button:after,
  n-trib-action-main > span > i {
    display: none;
  }
}

n-trib-action-extra {
  width: 30%;
  color: var(--clouds);
  cursor: pointer;
  background-color: var(--black);
  border-left: 1px inset rgba(0,0,0,0.1);
}
.moreStepAction > .react-contextmenu-wrapper,
n-trib-action-extra > .react-contextmenu-wrapper {
  width: 100%;
  height: 100%;
}
n-trib-action-main, n-trib-action-extra,
n-trib-action-extra > .react-contextmenu-wrapper {
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  align-items: center;
  justify-content: center;
  height: 100%;
}

.tribCluster {
  background-color: var(--black);
	animation-name: fadeIn;
  animation-duration: 1s;
  animation-timing-function: var(--scottsCurve);
  animation-iteration-count: 1;
}
.tribCluster summary {
  margin: 12px 0;
  padding: 0.5rem 0 0 0.25rem;
  min-width: 13vmax;
  max-width: 14vmax;
	min-height: 65px;
	transition: background-color 250ms ease-in;
}
.tribCluster summary:hover {
  filter: none;
}
n-trib-cluster-head {
	display: flex;
	flex-flow: row nowrap;
	margin-top: 0.5rem;
	background-color: var(--pomegranatefrost);
}

.tribCluster n-trib-info  {
  height: 100%;
  min-height: 50px;
  padding: 8px 8px 8px 0.25rem;
}
n-trib-action-all {
  width: 40%;
  min-height: 100%;
}

.pebbleSVG {
  backface-visibility: hidden;
  width: 80%;
  height: auto;
  transform: translate(0%, 20%);
}
.stoneFrame {
  max-width: 31vmax;
}
.stoneForm {
  display: flex;
  width: 100%;
  flex-direction: column;
  justify-content: space-around;
  align-self: flex-start;
  color-scheme: light;
}
.stoneFormClose {
  color: rgb(25,25,25);
  background-color: var(--peterriver);
}
.stoneFormClose:hover {
  color: var(--peterriver);
  background-color: rgb(25,25,25);
}
.fakeFielset {
  border-top: 3px dashed rgba(255,255,255,0.5);
  border-right: none;
  border-bottom: none;
  border-left: none;
  padding: 1vmax;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-around;
}
.fakeFielset label {
  line-height: 1.2;
  margin: 5px 0;
}
.fakeFielset input, .fakeFielset select {
  display: block;
}
.fakeFielset.space2v { 
  padding: 2vmax;
  gap: 2vmax;
  justify-content: space-evenly;
}
.dTopGap { border-top: 4dvh solid var(--dark); }
.dBotGap { border-bottom: 4dvh solid var(--dark); }

.stoneForm input[type='text'],
.stoneForm select,
.stoneForm details {
  max-width: 11vmax;
}

.wideStone {
  min-width: 11vmax;
  width: -moz-fit-content;
  width: 80%;
  max-width: 30vmax;
  min-height: 1rem;

}
.wideStone textarea {
  min-width: 11vmax;
  width: 100%;
}

.adaptStone {
  min-width: 11vw;
  width: 100%;
  max-width: 30vmax;
  width: clamp(11vmax, 100%, 30vmax);
}

.stoneForm textarea { 
  border-color: black;
  resize: vertical;
}

.stoneForm input:focus + label,
.stoneForm select:focus + label,
.stoneForm textarea:focus + label {
  color: white;
  border-bottom-color: black;
  outline-color: black;
}

.stoneForm input[type='radio'] {
  display: none;
}
.stoneForm input[type='radio']:checked + label {
  background-color: white;
  color: var(--peterriver);
}

.stoneForm .tempTag {
  padding-left: 12px;
}

.stoneForm .clearWhite:hover {
  background-color: white;
  color: var(--peterriver);
}

.flowForm .dropdown-container,
.emailForm .dropdown-container,
.stoneForm .dropdown-container {
  color: black;
  border: 1px solid black;
}
.stoneForm .multi-select,
.stoneForm .dropdown-container {
  min-width: 11vmax;
  max-width: 11vmax;
}
.flowForm .item-renderer,
.emailForm .item-renderer,
.stoneForm .item-renderer {
  display: grid !important;
  align-items: center !important;
  color: black !important;
  grid-auto-flow: column;
  justify-content: left;
}
.flowForm .item-renderer > input,
.emailForm .item-renderer > input,
.stoneForm .item-renderer > input {
  width: 1rem;
}
.stoneForm .dropdown-content {
  width: -moz-fit-content;
  width: fit-content;
  font-size: 1rem;
}
.stoneForm .dropdown-container {
  min-width: unset;
}

.testFail {
  background-color: rgb(50,50,50);
  padding: 1vh 0 1vh 10px;
  border-left: 0.5vmax solid var(--pomegranate);
}
.testFail summary {
  padding: 0;
}

.firstGood {
  --high-color: var(--emerald);
}
.firstBad {
  --high-color: var(--alizarin);
}
.firstGood, .firstBad {
  background-color: var(--high-color);
  border: 3px solid white;
  color: white;
}

.reStep {
  width: 100%;
}
.reStep:not(:nth-child(-n+1)) {
  margin-top: 0.5rem;
}
.reStep:not(:nth-child(-n+2)) {
  padding-top: 0.5rem;
  border-top: 2px dashed rgba(255,255,255,0.5);
}
.reStep span {
  display: flex;
  justify-content: space-evenly;
  flex-wrap: wrap;
  column-gap: 2vmax;
  padding-inline: 1vmax;
}
.reStep > span label {
  line-height: 1;
  cursor: pointer;
}
.reInspect {
  --high-color: var(--emerald);
}
.reTest {
  --high-color: var(--turquoise);
}
.reFail {
  --high-color: var(--alizarin);
}
.reBy {
  --high-color: var(--pomegranate);
}
.reInspect, .reTest, .reFail, .reBy {
  border-radius: 2rem;
  font-size: 1rem;
  font-weight: 600;
  margin-block: 0.5rem;
  padding: 0.25rem 0.5rem 0.5rem 0.5rem;
  letter-spacing: 1px;
  border: 3px solid;
  border-color: white;
  background-color: var(--high-color);
  color: white;
  flex: 1;
}
.optStep > .reTest,
.optStep > .reFail {
  border-radius: 0.25rem;
}
.firstBad:where(:hover,:focus-visible,:active),
.firstGood:where(:hover,:focus-visible,:active),
.reInspect:where(:hover,:focus-visible,:active),
.reTest:where(:hover,:focus-visible,:active),
.reFail:where(:hover,:focus-visible,:active),
.reBy:where(:hover,:focus-visible,:active) {
  box-shadow: 0 0 0 3px var(--high-color);
}

.ncTypeList datalist {
  text-transform: capitalize;
}

.forkButton {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: center;
  align-items: center;
  word-break: keep-all;
  padding: 1vmax 1vmin;
  width: 100%;
  min-height: 10vmin;
  text-transform: capitalize;
  background-color: transparent;
  color: var(--pumpkin);
  border: 1vmax solid var(--pumpkin);
}
.forkButton {
  font-size: 3vmax;
}
.forkButton b, .forkButton i {
  font-size: 1.75vmax;
}
.forkButton:hover, .forkButton:active {
  background-color: var(--pumpkin);
  color: var(--blackT);
}

.rapIsHighlight {
  box-shadow: inset 0 0px 6vmin 1vmin var(--pumpkinfade);
}
.altHighlight {
  box-shadow: inset 0 0px 6vmin 1vmin var(--turquoisefade);
}

.finishBanner, .rapDidBanner, .altBanner {
  margin: 0.5vh 0;
  border-top: 1px solid;
  border-bottom: 1px solid;
  padding: 0.5vh 0.5vw;
  text-align: center;
}
.finishBanner { border-color: var(--wisteria); }
.rapDidBanner { border-color: var(--pumpkin); }
.altBanner { border-color: var(--turquoise); }

.endBox {
  display: flex;
  flex-flow: column nowrap;
  width: 100%;
  margin: 0 0 1vh 0;
  border: 5px solid; 
  padding: 0 1vmax 1vmax 1vmax;
  text-align: center;
}

.checkboxList input {
  min-height: 1.5rem;
  min-width: 1.5rem;
  color-scheme: light;
  accent-color: var(--wetasphalt) !important;
}
.checkboxList > label {
  padding: 0.5rem 0;
  border-bottom: 1px solid lightgray;
  margin: 0;
  cursor: pointer;
}
.checkboxList > label:where(:hover,:focus-visible,:disabled) {
  background-color: var(--wetasphalttrans);
}
.checkboxList > label:active {
  background-color: var(--wetasphalt);
}

@media screen and (prefers-reduced-motion: reduce) { 
  .stone, .crackedTop, .crackedBot {
    transition: none;
  }
  .stone:active::after,
  .crackedTop:active::after,
  .crackedBot:active::after,
  .ncAct:active::before {
    animation-iteration-count: 1;
  }
}